/*
 * Generated by Bluespec Compiler, version 2023.07-31-ge4361d91 (build e4361d91)
 * 
 * On Tue May 14 00:48:12 EDT 2024
 * 
 */

/* Generation options: */
#ifndef __mkCache32_h__
#define __mkCache32_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkCache32 module */
class MOD_mkCache32 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUWide> INST_curReq;
  MOD_Reg<tUInt8> INST_curState;
  MOD_BRAM<tUInt8,tUWide,tUInt64> INST_dataArray_memory;
  MOD_Reg<tUInt8> INST_dataArray_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_dataArray_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_dataArray_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_outData_dequeueing;
  MOD_Wire<tUWide> INST_dataArray_serverAdapter_outData_enqw;
  MOD_Fifo<tUWide> INST_dataArray_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_dataArray_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_dataArray_serverAdapter_writeWithResp;
  MOD_CReg<tUWide> INST_fromMem_rv;
  MOD_BRAM<tUInt8,tUInt8,tUInt8> INST_statusArray_memory;
  MOD_Reg<tUInt8> INST_statusArray_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_statusArray_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_statusArray_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_outData_dequeueing;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_outData_enqw;
  MOD_Fifo<tUInt8> INST_statusArray_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_statusArray_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_statusArray_serverAdapter_writeWithResp;
  MOD_BRAM<tUInt8,tUInt32,tUInt8> INST_tagArray_memory;
  MOD_Reg<tUInt8> INST_tagArray_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_tagArray_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_tagArray_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_outData_dequeueing;
  MOD_Wire<tUInt32> INST_tagArray_serverAdapter_outData_enqw;
  MOD_Fifo<tUInt32> INST_tagArray_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_tagArray_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_tagArray_serverAdapter_writeWithResp;
  MOD_CReg<tUWide> INST_toMem_rv;
  MOD_CReg<tUInt64> INST_toProc_rv;
 
 /* Constructor */
 public:
  MOD_mkCache32(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_putFromProc_e;
  tUWide PORT_putFromMem_e;
  tUWide PORT_getToMem;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_statusArray_serverAdapter_s1___d132;
  tUInt8 DEF_statusArray_serverAdapter_outData_enqw_wget____d106;
  tUInt8 DEF_tagArray_serverAdapter_s1___d84;
  tUInt8 DEF_dataArray_serverAdapter_s1___d35;
  tUInt8 DEF_statusArray_serverAdapter_cnt_3_whas____d111;
  tUInt8 DEF_statusArray_serverAdapter_cnt_2_whas____d109;
  tUInt8 DEF_statusArray_serverAdapter_cnt_1_whas____d108;
  tUInt8 DEF_statusArray_serverAdapter_outData_ff_i_notEmpty____d103;
  tUInt8 DEF_tagArray_serverAdapter_cnt_3_whas____d63;
  tUInt8 DEF_tagArray_serverAdapter_cnt_2_whas____d61;
  tUInt8 DEF_tagArray_serverAdapter_cnt_1_whas____d60;
  tUInt8 DEF_tagArray_serverAdapter_outData_ff_i_notEmpty____d54;
  tUInt8 DEF_dataArray_serverAdapter_cnt_3_whas____d13;
  tUInt8 DEF_dataArray_serverAdapter_cnt_2_whas____d11;
  tUInt8 DEF_dataArray_serverAdapter_cnt_1_whas____d10;
  tUInt8 DEF_dataArray_serverAdapter_outData_ff_i_notEmpty____d4;
  tUInt8 DEF_statusArray_serverAdapter_s1_32_BIT_0___d133;
  tUInt8 DEF_tagArray_serverAdapter_s1_4_BIT_0___d85;
  tUInt8 DEF_dataArray_serverAdapter_s1_5_BIT_0___d36;
  tUWide DEF_toMem_rv_port1__read____d390;
  tUInt8 DEF_IF_tagArray_serverAdapter_outData_ff_i_notEmpt_ETC___d173;
  tUInt8 DEF_x__h5951;
  tUInt8 DEF_IF_statusArray_serverAdapter_outData_ff_i_notE_ETC___d166;
  tUInt8 DEF_NOT_IF_statusArray_serverAdapter_outData_ff_i__ETC___d174;
  tUWide DEF_toMem_rv_port0__read____d183;
  tUWide DEF_fromMem_rv_port1__read____d301;
  tUWide DEF_fromMem_rv_port0__read____d392;
  tUWide DEF_curReq_first____d158;
  tUInt64 DEF_toProc_rv_port1__read____d386;
  tUInt32 DEF_x_wget__h1860;
  tUInt32 DEF_x_first__h1745;
  tUInt8 DEF_b__h3837;
  tUInt8 DEF_b__h2353;
  tUInt8 DEF_b__h886;
  tUInt32 DEF_pa_tag__h5881;
  tUInt8 DEF_IF_statusArray_serverAdapter_outData_ff_i_notE_ETC___d186;
  tUInt8 DEF_curReq_first__58_BITS_67_TO_64_78_EQ_0___d179;
  tUInt32 DEF_v__h5759;
  tUInt32 DEF_x__h1958;
  tUInt8 DEF_IF_statusArray_serverAdapter_outData_ff_i_notE_ETC___d167;
 
 /* Local definitions */
 private:
  tUInt8 DEF__0_CONCAT_DONTCARE___d26;
  tUInt8 DEF_x__h6662;
  tUWide DEF_x_wget__h392;
  tUWide DEF_x_first__h277;
  tUWide DEF_v__h1461;
  tUWide DEF_x__h12777;
  tUWide DEF_IF_fromMem_rv_port1__read__01_BIT_512_02_THEN__ETC___d316;
  tUWide DEF_v__h5547;
  tUInt8 DEF_x2__h5410;
  tUWide DEF_IF_IF_statusArray_serverAdapter_outData_ff_i_n_ETC___d300;
  tUWide DEF__3_CONCAT_IF_tagArray_serverAdapter_outData_ff__ETC___d297;
  tUWide DEF__2_CONCAT_curReq_first__58_BITS_63_TO_0_98_CONC_ETC___d299;
  tUWide DEF_IF_curReq_first__58_BITS_67_TO_64_78_EQ_0_79_T_ETC___d383;
  tUWide DEF_x3__h11463;
  tUWide DEF_x__h490;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_0___d263;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_1___d261;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_2___d258;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_3___d256;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_4___d253;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_5___d251;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_6___d248;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_7___d246;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_8___d243;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_9___d241;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_10___d238;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_11___d236;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_12___d233;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_13___d231;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_15___d226;
  tUInt8 DEF_curReq_first__58_BITS_37_TO_34_20_EQ_14___d228;
  tUWide DEF__0_CONCAT_DONTCARE___d389;
  tUWide DEF__1_CONCAT_putFromMem_e___d391;
  tUWide DEF__0_CONCAT_DONTCARE___d307;
  tUWide DEF_x3__h6000;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d287;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d379;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d284;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d376;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d281;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d373;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d278;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d370;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d275;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d367;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d272;
  tUWide DEF_IF_curReq_first__58_BITS_37_TO_34_20_EQ_15_26__ETC___d364;
 
 /* Rules */
 public:
  void RL_dataArray_serverAdapter_outData_enqueue();
  void RL_dataArray_serverAdapter_outData_dequeue();
  void RL_dataArray_serverAdapter_cnt_finalAdd();
  void RL_dataArray_serverAdapter_s1__dreg_update();
  void RL_dataArray_serverAdapter_stageReadResponseAlways();
  void RL_dataArray_serverAdapter_moveToOutFIFO();
  void RL_dataArray_serverAdapter_overRun();
  void RL_tagArray_serverAdapter_outData_enqueue();
  void RL_tagArray_serverAdapter_outData_dequeue();
  void RL_tagArray_serverAdapter_cnt_finalAdd();
  void RL_tagArray_serverAdapter_s1__dreg_update();
  void RL_tagArray_serverAdapter_stageReadResponseAlways();
  void RL_tagArray_serverAdapter_moveToOutFIFO();
  void RL_tagArray_serverAdapter_overRun();
  void RL_statusArray_serverAdapter_outData_enqueue();
  void RL_statusArray_serverAdapter_outData_dequeue();
  void RL_statusArray_serverAdapter_cnt_finalAdd();
  void RL_statusArray_serverAdapter_s1__dreg_update();
  void RL_statusArray_serverAdapter_stageReadResponseAlways();
  void RL_statusArray_serverAdapter_moveToOutFIFO();
  void RL_statusArray_serverAdapter_overRun();
  void RL_ready();
  void RL_lookup();
  void RL_writeback();
  void RL_allocate();
 
 /* Methods */
 public:
  void METH_putFromProc(tUWide ARG_putFromProc_e);
  tUInt8 METH_RDY_putFromProc();
  tUInt32 METH_getToProc();
  tUInt8 METH_RDY_getToProc();
  tUWide METH_getToMem();
  tUInt8 METH_RDY_getToMem();
  void METH_putFromMem(tUWide ARG_putFromMem_e);
  tUInt8 METH_RDY_putFromMem();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCache32 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCache32 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCache32 &backing);
};

#endif /* ifndef __mkCache32_h__ */
